#!/usr/bin/env bash

# Copyright (C) 2015, Arpinum
#
# Beastmaster is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Beastmaster is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with Beastmaster. If not, see
# http://www.gnu.org/licenses/lgpl.html.

# Beastmaster all in one source file

bst_config__load() {
  BST_VALUE_SEPARATOR=","
  BST_CONFIG_DIR="${HOME}/.bst"
  BST_INTERACTIVE="yes"
  _bst_config__ensure_config_file_exists
}

_bst_config__ensure_config_file_exists() {
  if [[ ! -f "$(bst_config__config_file)" ]]; then
    mkdir -p "${BST_CONFIG_DIR}"
    system__print_line "$(_bst_config__config_file_header)" > "$(bst_config__config_file)"
  fi
}

_bst_config__config_file_header() {
  system__print "\
#
# Beastmaster config file
#
# Declare one project per line, ex:
#
# name:directory:tag1:tag2:...:tagN
#"
}

bst_config__project_lines() {
  local line
  while read line; do
    bst_config__project_line_is_commented "${line}" || system__print_line "${line}"
  done < "$(bst_config__config_file)"
}

bst_config__project_line_is_commented() {
  [[ "$1" == \#* ]]
}

bst_config__config_file() {
  system__print "${BST_CONFIG_DIR}/config"
}

system__print_line() {
  system__print "$1"
  system__print_new_line
}

system__print() {
  printf "%s" "$1"
}

system__print_new_line() {
  printf "\n"
}

system__dir_name() {
  system__print "${1##*\/}"
}

system__dir_path() {
  (cd "$1"; pwd)
}

system__ask_for_confirmation() {
  [[ "${BST_INTERACTIVE}" == "no" ]] && return 0
  system__print "$1 (y/n) "
  local response=""
  read response < /dev/tty
  [[ "${response}" == "y" ]]
}

string__token_at() {
  local position="$1"
  local string="$2"
  local i
  for (( i=1; i < ${position}; i++ )); do
    string="$(string__without_first_token "${string}")"
  done
  system__print "${string%%:*}"
}

string__without_first_token() {
  [[ "$1" == *:* ]] && system__print "${1#*:}"
}

string__split() {
  local old_ifs="${IFS}"
  IFS="${BST_VALUE_SEPARATOR}"
  for value in $1; do
    system__print_line "${value}"
  done
  IFS="${old_ifs}"
}

array__contains() {
  local value="$1"
  shift 1
  local i
  for (( i=1; i <= $#; i++ )); do
    [[ "${!i}" == "${value}" ]] && return 0
  done
  return 1
}

array__print() {
  local element
  for element in "$@"; do
    system__print_line "${element}"
  done
}

option__name() {
  local option="$1"
  option="${option#-}"
  system__print "${option#-}"
}

option__short_option_from_string() {
  string__token_at 1 "$1"
}

option__long_option_from_string() {
  string__token_at 2 "$1"
}

option__value_type_from_string() {
  string__token_at 3 "$1"
}

option__variable_from_string() {
  string__token_at 4 "$1"
}

command__parse_args() {
  _command__parse_options "$@"
  shift ${bst_read_options}
  $(_namespace)run "$@"
}

command__define_current_command() {
  bst_current_command="$1"
  bst_delegate_to_sub_commands="no"
  bst_option_strings=()
}

command__delegate_to_sub_commands() {
  bst_delegate_to_sub_commands="yes"
}

command__with_option() {
  bst_option_strings+=("$1")
}

command__check_args_count() {
  local expected=$1
  local actual=$2
  (( ${actual} > ${expected} )) && _command__wrong_args_count ${actual} ${expected}
}

_command__parse_options() {
  for (( bst_read_options = 0; bst_read_options < $#; )) do
    local index=$(( bst_read_options + 1 ))
    local argument="${!index}"
    case "${argument}" in
      -h|--help)
      command__help_triggered
      ;;
      --*)
      _command__handle_long_option "${argument}" "${@:${index}+1}"
      ;;
      -*)
      _command__handle_short_option "${argument}" "${@:${index}+1}"
      ;;
      *)
      return 0
      ;;
    esac
  done
}

command__help_triggered() {
  _command__print_usage
  exit 0
}

_command__handle_short_option() {
  _command__handle_option "short" "$@"
}

_command__handle_long_option() {
  _command__handle_option "long" "$@"
}

_command__handle_option() {
  local option_length="$1"
  local option_with_dash="$2"
  shift 2
  (( bst_read_options++ ))
  local option_name="$(option__name "${option_with_dash}")"
  local option_string
  for option_string in "${bst_option_strings[@]}"; do
    if [[ "${option_name}" == "$(option__"${option_length}"_option_from_string "${option_string}")" ]]; then
      local option_variable="$(option__variable_from_string "${option_string}")"
      local option_value_type="$(option__value_type_from_string "${option_string}")"
      if [[ "${option_value_type}" != "none" ]]; then
        (( bst_read_options++ ))
        _command__check_if_option_is_followed_by_value "${option_name}" "$@"
        local option_value="$1"
      else
        local option_value="yes"
      fi
      printf -v "${option_variable}" "${option_value}"
      return 0
    fi
  done
  _command__illegal_option_parsed "${option_name}"
}

_command__illegal_option_parsed() {
  system__print_line "Illegal option: $1"
  system__print_new_line
  _command__print_usage
  exit 1
}

_command__check_if_option_is_followed_by_value() {
  if (( $# == 1 )); then
    system__print_line "Missing value for option: $1"
    system__print_new_line
    _command__print_usage
    exit 1
  fi
}

_command__wrong_args_count() {
  command__bad_usage "Wrong args count: $1 instead of $2 at most"
}

command__bad_usage() {
  system__print_line "$1"
  system__print_new_line
  _command__print_usage
  exit 1
}

command__fail() {
  system__print_line "$1"
  exit 1
}

command__illegal_command_parsed() {
  system__print_line "Illegal command: $1"
  system__print_new_line
  _command__print_usage
  exit 1
}

_command__print_usage() {
  system__print_line "$($(_namespace)usage)"
}

_command__name() {
  [[ "${bst_current_command}" == "default" ]] \
    && system__print "bst" \
    || system__print "bst ${bst_current_command}"
}

_namespace() {
  system__print "_bst_${bst_current_command}_command__"
}

bst_project__name_from_line() {
  string__token_at 1 "$1"
}

bst_project__directory_from_line() {
  string__token_at 2 "$1"
}

bst_project__tags_from_line() {
  local without_name="$(string__without_first_token "$1")"
  local only_tags="$(string__without_first_token "${without_name}")"
  while [[ -n "${only_tags}" ]]; do
    string__token_at 1 "${only_tags}"
    system__print_new_line
    only_tags="$(string__without_first_token "${only_tags}")"
  done
}

bst_projects__exists_with_name() {
  local name="$1"
  local line
  while read line; do
    local current_name="$(bst_project__name_from_line "${line}")"
    [[ "${name}" == "${current_name}" ]] && return 0
  done < <(bst_config__project_lines)
  return 1
}

bst_projects__exists_with_directory() {
  local directory="$1"
  local line
  while read line; do
    local current_dir="$(bst_project__directory_from_line "${line}")"
    [[ "${directory}" == "${current_dir}" ]] && return 0
  done < <(bst_config__project_lines)
  return 1
}

bst_projects__for_each_line() {
  local line
  while read line; do
    "$@" "${line}"
  done < <(bst_config__project_lines)
}

bst_projects__reset_filters() {
  bst_project_filter_name=""
  bst_project_filter_tags=()
}

bst_projects__filters_empty() {
  [[ -z "${bst_project_filter_name}" ]] \
    && (( ${#bst_project_filter_tags[@]} == 0 ))
}

bst_projects__filtered_lines() {
  local line
  while read line; do
    _bst_projects__line_satisfies_name_filter "${line}" \
    && _bst_projects__line_satisfies_tags_filter "${line}" \
    && system__print_line "${line}"
  done < <(bst_config__project_lines)
}

_bst_projects__line_satisfies_name_filter() {
  [[ -z "${bst_project_filter_name}" ]] && return 0
  [[ "$(bst_project__name_from_line "$1")" == ${bst_project_filter_name} ]]
}

_bst_projects__line_satisfies_tags_filter() {
  (( ${#bst_project_filter_tags[@]} == 0 )) && return 0
  local wanted_tag
  for wanted_tag in "${bst_project_filter_tags[@]}"; do
    _bst_projects__project_line_has_tag "${line}" "${wanted_tag}" && return 0
  done
  return 1
}

_bst_projects__project_line_has_tag() {
  local line="$1"
  local wanted_tag="$2"
  local line_tag
  while read line_tag; do
    [[ "${line_tag}" == "${wanted_tag}" ]] && return 0
  done < <(bst_project__tags_from_line "${line}")
  return 1
}

bst_config_command__parse_args() {
  command__define_current_command "config"
  command__parse_args "$@"
}

_bst_config_command__run() {
  command__check_args_count 0 $#
  _bst_config_command__check_editor
  "${EDITOR}" "$(bst_config__config_file)"
}

_bst_config_command__check_editor() {
  local error="EDITOR environment variable must be set.
  ex: export EDITOR=/usr/bin/nano (or vi if you like 50 shades of grey)"
  [[ -z "${EDITOR}" ]] && command__fail "${error}"
}

_bst_config_command__usage() {
  system__print "\
Edit the configuration.

Usage: bst config"
}

bst_free_command__parse_args() {
  command__define_current_command "free"
  command__parse_args "$@"
}

_bst_free_command__run() {
  if (( $# == 0 )); then
    _bst_free_command_free_project "$(system__dir_name "$(pwd)")"
  else
    command__check_args_count 1 $#
    _bst_free_command_free_project "$1"
  fi
}

_bst_free_command_free_project() {
  local name="$1"
  _bst_free_command__check_project_exists "${name}"
  system__ask_for_confirmation "Free ${name} project?" || return 0
  local new_config="$(_bst_free_command__create_temp_file)"
  local line
  while read line; do
    _bst_free_command__line_must_be_kept "${line}" "${name}" && system__print_line "${line}" >> "${new_config}"
  done < "$(bst_config__config_file)"
  _bst_free_command__copy_temp_file_in_config_file "${new_config}"
  system__print_line "${name} is running away..."
}

_bst_free_command__check_project_exists() {
  bst_projects__exists_with_name "$1" || _bst_free_command__project_does_not_exist "$1"
}

_bst_free_command__project_does_not_exist() {
  command__fail "No project named $1."
}

_bst_free_command__line_must_be_kept() {
  local line="$1"
  local name="$2"
  bst_config__project_line_is_commented "${line}" && return 0
  local current_name="$(bst_project__name_from_line "${line}")"
  [[ "${current_name}" != "${name}" ]]
}

_bst_free_command__create_temp_file() {
  local file="${BST_CONFIG_DIR}/config_${RANDOM}"
  touch "${file}"
  system__print "${file}"
}

_bst_free_command__copy_temp_file_in_config_file() {
  local new_config="$1"
  cat "${new_config}" > "$(bst_config__config_file)"
  rm "${new_config}"
}

_bst_free_command__usage() {
  system__print "\
Remove a project from your project list.

Usage: bst free project_name"
}

bst_list_command__parse_args() {
  command__define_current_command "list"
  command__parse_args "$@"
}

_bst_list_command__run() {
  command__check_args_count 0 $#
  bst_projects__for_each_line _bst_list_command__print_line
}

_bst_list_command__print_line() {
  local line="$1"
  local name="$(bst_project__name_from_line "${line}")"
  local dir="$(bst_project__directory_from_line "${line}")"
  local tags="$(_bst_list_command__tags_from_line "${line}")"
  system__print_line "${name} at ${dir}${tags}"
}

_bst_list_command__tags_from_line() {
  local tag
  while read tag; do
    system__print " #${tag}"
  done < <(bst_project__tags_from_line "$1")
}

_bst_list_command__usage() {
  system__print "\
Print your project list.

Usage: bst list"
}

bst_order_command__parse_args() {
  command__define_current_command "order"
  bst_projects__reset_filters
  command__with_option "a:all:none:bst_order_all"
  command__with_option "n:name:string:bst_order_name"
  command__with_option "t:tags:string:bst_order_tags"
  command__with_option "v:verbose:none:bst_verbose_orders"
  command__parse_args "$@"
}

_bst_order_command__run() {
  (( $# == 0 )) && command__help_triggered
  [[ -n "${bst_order_tags}" ]] && _bst_order_command__init_tags_filter
  [[ -n "${bst_order_name}" ]] && bst_project_filter_name="${bst_order_name}"
  [[ -n "${bst_order_all}" ]] && bst_project_filter_name="*"
  if bst_projects__filters_empty; then
    bst_project_filter_name="$1"
    shift 1
  fi
  _bst_order_command__order_command_for_filtered_projects "$@"
}

_bst_order_command__init_tags_filter() {
  local tag
  while read tag; do
    bst_project_filter_tags+=("${tag}")
  done < <(string__split "${bst_order_tags}")
}

_bst_order_command__order_command_for_filtered_projects() {
  local line
  while read line; do
    local directory="$(bst_project__directory_from_line "${line}")"
    local name="$(bst_project__name_from_line "${line}")"
    _bst_order_command__check_directory
    _bst_order_command__order_command "$@"
  done < <(bst_projects__filtered_lines)
}

_bst_order_command__order_command() {
  [[ "${bst_verbose_orders}" == "yes" ]] \
    && system__print_line "Ordering command in ${directory} for ${name}."
  ( cd "${directory}" && "$@" )
}

_bst_order_command__check_directory() {
  [[ ! -d "${directory}" ]] && command__fail "${directory} does not exist for ${name}."
}

_bst_order_command__usage() {
  system__print "\
Execute a command in the project directory.

Usages: bst order [options] [project_name] command
    or: bst order --tags=tag1 command
    or: bst order --name=project_name --tags=tag1 command

Options:
  -a, --all                 Consider all projects.
  -n, --name project_name   Only consider projects matching the name.
  -t, --tags tag1[,tagN]    Only consider projects having one of these tags.
  -v, --verbose             Print more information.

bst order options should be placed before command to not mess with command own
options.

If both tag and name filters must be set, the name should be passed with
--name option to avoid ambiguity with command."
}

bst_tame_command__parse_args() {
  command__define_current_command "tame"
  command__with_option "d:directory:string:bst_taming_dir"
  command__with_option "r:root:none:bst_taming_root"
  command__with_option "t:tags:string:bst_taming_tags"
  command__parse_args "$@"
}

_bst_tame_command__run() {
  _bst_tame_command_init_taming_dir
  if [[ -n "${bst_taming_root}" ]]; then
    _bst_tame_command__try_add_all_child_projects_in_directory "$@"
  else
    _bst_tame_command__try_add_the_project_in_directory "$@"
  fi
}

_bst_tame_command_init_taming_dir() {
  if [[ -n "${bst_taming_dir}" ]]; then
    bst_taming_dir="$(system__dir_path "${bst_taming_dir}")"
  else
    bst_taming_dir="$(pwd)"
  fi
}

_bst_tame_command__try_add_all_child_projects_in_directory() {
  if (( $# > 0 )); then
    command__bad_usage "bst tame: you should not tame root directory and provide a name."
  else
    local entry
    for entry in ${bst_taming_dir}/*; do
      if [[ -d "${entry}" ]]; then
        _bst_tame_command__add_project "$(system__dir_name "${entry}")" "$(system__dir_path "${entry}")"
      fi
    done
  fi
}

_bst_tame_command__try_add_the_project_in_directory() {
  if (( $# == 0 )); then
    _bst_tame_command__add_project "$(system__dir_name "${bst_taming_dir}")" "${bst_taming_dir}"
  else
    command__check_args_count 1 $#
    _bst_tame_command__add_project "$1" "${bst_taming_dir}"
  fi
}

_bst_tame_command__add_project() {
  local name="$1"
  local directory="$2"
  _bst_tame_command__check_project_collisions "${name}" "${directory}"
  system__ask_for_confirmation "Tame ${directory} as ${name}?" || return 0
  local line="${name}:${directory}"
  line="$(_bst_tame_command__line_with_tags "${line}")"
  system__print_line "${line}" >> "$(bst_config__config_file)"
  system__print_line "${name} is now tamed!"
}

_bst_tame_command__line_with_tags() {
  local line="$1"
  local tag
  while read tag; do
    line="${line}:${tag}"
  done < <(string__split "${bst_taming_tags}")
  system__print "${line}"
}

_bst_tame_command__check_project_collisions() {
  local name="$1"
  local directory="$2"
  bst_projects__exists_with_name "${name}" && _bst_tame_command__name_collision "${name}"
  bst_projects__exists_with_directory "${directory}" && _bst_tame_command__directory_collision "${directory}"
}

_bst_tame_command__name_collision() {
  command__fail "A project named $1 already exists."
}

_bst_tame_command__directory_collision() {
  command__fail "A project already exists at directory $1."
}

_bst_tame_command__usage() {
  system__print "\
Add one or more projects to the project list.

Usage: bst tame [options] [project_name]
             -> add single project
   or: bst tame [options] --root
             -> add all projects in the taming directory

Options:
  -d, --directory dir             Set taming directory (default is current).
  -r, --root                      Tame all child projects in the current directory.
  -t, --tags tag1[,tag2][,tagN]   Assign one or more tags to the project.

When directory is not set, the current one is considered as the taming directory."
}

bst_program__run() {
  bst_config__load
  command__define_current_command "default"
  command__delegate_to_sub_commands
  command__parse_args "$@"
}

_bst_default_command__run() {
  (( $# == 0 )) && command__help_triggered
  _bst_default_command__run_command "$@"
}

_bst_default_command__run_command() {
  local command="$1"
  local accepted=("config" "free" "list" "order" "tame")
  array__contains "${command}" "${accepted[@]}" || command__illegal_command_parsed "${command}"
  shift 1
  bst_${command}_command__parse_args "$@"
}

_bst_default_command__usage() {
  system__print "\
Usage: bst command [arg...]

A Bash tool which can run any command in your favorite projects (aka pets).

Options:
  -h, --help  Print usage

Commands:
  config      Edit the configuration
  free        Remove a project from your project list
  list        Print your project list
  order       Execute a command in the project directory
  tame        Add a project to your project list

Run 'bst command --help' for more information on a command."
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && bst_program__run "$@" || true